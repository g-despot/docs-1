(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{122:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return l})),a.d(t,"default",(function(){return c}));var n=a(3),r=a(7),i=(a(0),a(180)),o={id:"graph-algorithms",title:"Graph algorithms",sidebar_label:"Graph algorithms"},s={unversionedId:"concepts/graph-algorithms",id:"concepts/graph-algorithms",isDocsHomePage:!1,title:"Graph algorithms",description:"Introduction",source:"@site/docs/concepts/graph-algorithms.md",slug:"/concepts/graph-algorithms",permalink:"/memgraph/concepts/graph-algorithms",editUrl:"https://github.com/memgraph/docs/tree/master/docs/concepts/graph-algorithms.md",version:"current",sidebar_label:"Graph algorithms",sidebar:"memgraph",previous:{title:"Storage",permalink:"/memgraph/concepts/storage"},next:{title:"Indexing",permalink:"/memgraph/concepts/indexing"}},l=[{value:"Introduction",id:"introduction",children:[]},{value:"Breadth First Search",id:"breadth-first-search",children:[]},{value:"Weighted Shortest Path",id:"weighted-shortest-path",children:[{value:"Dijkstra&#39;s algorithm",id:"dijkstras-algorithm",children:[]}]},{value:"Where to next?",id:"where-to-next",children:[]}],h={toc:l};function c(e){var t=e.components,o=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(n.a)({},h,o,{components:t,mdxType:"MDXLayout"}),Object(i.a)("h2",{id:"introduction"},"Introduction"),Object(i.a)("p",null,'The graph is a mathematical structure used to describe a set of objects in which\nsome pairs of objects are "related" in some sense. Generally, we consider\nthose objects as abstractions named ',Object(i.a)("inlineCode",{parentName:"p"},"nodes")," (also called ",Object(i.a)("inlineCode",{parentName:"p"},"vertices"),").\nAforementioned relations between nodes are modelled by an abstraction named\n",Object(i.a)("inlineCode",{parentName:"p"},"edge")," (also called ",Object(i.a)("inlineCode",{parentName:"p"},"relationship"),")."),Object(i.a)("p",null,"It turns out that a lot of real-world problems can be successfully modeled\nusing graphs. Some natural examples would contain railway networks between\ncities, computer networks, piping systems and Memgraph itself."),Object(i.a)("p",null,"This article outlines some of the most important graph algorithms\nthat are internally used by Memgraph. We believe that advanced users could\nsignificantly benefit from obtaining basic knowledge about those algorithms.\nThe users should also note that this article does not contain an in-depth\nanalysis of algorithms and their implementation details since those are\nwell documented in the appropriate literature and, in our opinion, go well out\nof scope for user documentation. That being said, we will include the relevant\ninformation for using Memgraph effectively and efficiently."),Object(i.a)("p",null,"Contents of this article include:"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("a",{parentName:"li",href:"#breadth-first-search"},"Breadth First Search (BFS)")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("a",{parentName:"li",href:"#weighted-shortest-path"},"Weighted Shortest Path (WSP)"))),Object(i.a)("h2",{id:"breadth-first-search"},"Breadth First Search"),Object(i.a)("p",null,Object(i.a)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Breadth-first_search"},"Breadth First Search"),"\nis a way of traversing a graph data structure. The\ntraversal starts from a single node (usually referred to as source node) and,\nduring the traversal, breadth is prioritized over depth, hence the name of the\nalgorithm. More precisely, when we visit some node, we can safely assume that\nwe have already visited all nodes that are fewer edges away from a source node.\nAn interesting side-effect of traversing a graph in BFS order is the fact\nthat, when we visit a particular node, we can easily find a path from\nthe source node to the newly visited node with the least number of edges.\nSince in this context we disregard the edge weights, we can say that BFS is\na solution to an unweighted shortest path problem."),Object(i.a)("p",null,"The algorithm itself proceeds as follows:"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},"Keep around a set of nodes that are equidistant from the source node.\nInitially, this set contains only the source node."),Object(i.a)("li",{parentName:"ul"},"Expand to all not yet visited nodes that are a single edge away from that\nset. Note that the set of those nodes is also equidistant from the source\nnode."),Object(i.a)("li",{parentName:"ul"},"Replace the set with a set of nodes obtained in the previous step."),Object(i.a)("li",{parentName:"ul"},"Terminate the algorithm when the set is empty.")),Object(i.a)("p",null,"The order of visited nodes is nicely visualized in the following animation from\nWikipedia. Note that each row contains nodes that are equidistant from the\nsource and thus represents one of the sets mentioned above."),Object(i.a)("p",null,Object(i.a)("img",{parentName:"p",src:"https://upload.wikimedia.org/wikipedia/commons/5/5d/Breadth-First-Search-Algorithm.gif",alt:null})),Object(i.a)("p",null,"The standard BFS implementation skews from the above description by relying on\na FIFO (first in, first out) queue data structure. Nevertheless, the\nfunctionality is equivalent and its runtime is bounded by ",Object(i.a)("inlineCode",{parentName:"p"},"O(|V| + |E|)")," where\n",Object(i.a)("inlineCode",{parentName:"p"},"V")," denotes the set of nodes and ",Object(i.a)("inlineCode",{parentName:"p"},"E")," denotes the set of edges. Therefore,\nit provides a more efficient way of finding unweighted shortest paths than\nrunning ",Object(i.a)("a",{parentName:"p",href:"#weighted-shortest-path"},"Dijkstra's algorithm")," on a graph\nwith edge weights equal to ",Object(i.a)("inlineCode",{parentName:"p"},"1"),"."),Object(i.a)("h2",{id:"weighted-shortest-path"},"Weighted Shortest Path"),Object(i.a)("p",null,"In ",Object(i.a)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Graph_theory"},"graph theory"),", weighted shortest\npath problem is the problem of finding a path between two nodes in a graph such\nthat the sum of the weights of edges connecting nodes on the path is minimized."),Object(i.a)("h3",{id:"dijkstras-algorithm"},"Dijkstra's algorithm"),Object(i.a)("p",null,"One of the most important algorithms for finding weighted shortest paths is\n",Object(i.a)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"},"Dijkstra's algorithm"),'.\nOur implementation uses a modified version of this algorithm that can handle\nlength restriction. The length restriction parameter is optional and when it\'s\nnot set it could increase the complexity of the algorithm. It is important to\nnote that the term "length" in this context denotes the number of traversed\nedges and not the sum of their weights.'),Object(i.a)("p",null,"The algorithm itself is based on a couple of greedy observations and could\nbe expressed in natural language as follows:"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},"Keep around a set of already visited nodes along with their corresponding\nshortest paths from source node. Initially, this set contains only the\nsource node with the shortest distance of ",Object(i.a)("inlineCode",{parentName:"li"},"0"),"."),Object(i.a)("li",{parentName:"ul"},"Find an edge that goes from a visited node to an unvisited one such that the\nshortest path from source to the visited node increased by the weight of\nthat edge is minimized. Traverse that edge and add a newly visited node with\nappropriate distance to the set of already visited nodes."),Object(i.a)("li",{parentName:"ul"},"Repeat the process until the destination node is visited.")),Object(i.a)("p",null,"The described algorithm is nicely visualized in the following animation from\nWikipedia. Note that edge weights correspond to the Euclidean distance between\nnodes which represent points on a plane."),Object(i.a)("p",null,Object(i.a)("img",{parentName:"p",src:"https://upload.wikimedia.org/wikipedia/commons/e/e4/DijkstraDemo.gif",alt:null})),Object(i.a)("p",null,"Using appropriate data structures the worst-case performance of our\nimplementation can be expressed as  ",Object(i.a)("inlineCode",{parentName:"p"},"O(|E| + |V|log|V|)")," where ",Object(i.a)("inlineCode",{parentName:"p"},"E")," denotes\nthe set of edges and ",Object(i.a)("inlineCode",{parentName:"p"},"V")," denotes the set of nodes."),Object(i.a)("p",null,"A sample query that finds a shortest path between two nodes looks as follows:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (a {id: 723})-[edge_list *wShortest 10 (e, n | e.weight) total_weight]-(b {id: 882}) RETURN *;\n")),Object(i.a)("p",null,"This query has an upper bound length restriction set to ",Object(i.a)("inlineCode",{parentName:"p"},"10"),". This means that no\npath that traverses more than ",Object(i.a)("inlineCode",{parentName:"p"},"10")," edges will be considered as a valid result."),Object(i.a)("h4",{id:"upper-bound-implications"},"Upper Bound Implications"),Object(i.a)("p",null,"Since the upper bound parameter is optional, we can have different results based\non this parameter."),Object(i.a)("p",null,"Consider the following graph and sample queries."),Object(i.a)("p",null,Object(i.a)("img",{src:a(250).default})),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (a {id: 0})-[edge_list *wShortest 3 (e, n | e.weight) total_weight]-(b {id: 5}) RETURN *;\n")),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (a {id: 0})-[edge_list *wShortest   (e, n | e.weight) total_weight]-(b {id: 5}) RETURN *;\n")),Object(i.a)("p",null,"The first query will try to find the weighted shortest path between nodes ",Object(i.a)("inlineCode",{parentName:"p"},"0"),"\nand ",Object(i.a)("inlineCode",{parentName:"p"},"5")," with the restriction on the path length set to ",Object(i.a)("inlineCode",{parentName:"p"},"3"),", and the second query\nwill try to find the weighted shortest path with no restriction on the path\nlength."),Object(i.a)("p",null,"The expected result for the first query is ",Object(i.a)("inlineCode",{parentName:"p"},"0 -> 1 -> 4 -> 5")," with the total\ncost of ",Object(i.a)("inlineCode",{parentName:"p"},"12"),", while the expected result for the second query is\n",Object(i.a)("inlineCode",{parentName:"p"},"0 -> 2 -> 3 -> 4 -> 5")," with the total cost of ",Object(i.a)("inlineCode",{parentName:"p"},"11"),". Obviously, the second\nquery can find the true shortest path because it has no restrictions on the\nlength."),Object(i.a)("p",null,"To handle cases when the length restriction is set, ",Object(i.a)("em",{parentName:"p"},"weighted shortest path"),"\nalgorithm uses both node and distance as the state. This causes the search\nspace to increase by the factor of the given upper bound. On the other hand, not\nsetting the upper bound parameter, the search space might contain the whole\ngraph."),Object(i.a)("p",null,"Because of this, one should always try to narrow down the upper bound limit to\nbe as precise as possible in order to have a more performant query."),Object(i.a)("h2",{id:"where-to-next"},"Where to next?"),Object(i.a)("p",null,"For some real-world application of WSP we encourage you to visit our article\n",Object(i.a)("a",{parentName:"p",href:"/memgraph/tutorials/exploring-the-european-road-network"},"Exploring the European road network"),"\nwhich was specially crafted to showcase our graph algorithms."))}c.isMDXComponent=!0},180:function(e,t,a){"use strict";a.d(t,"a",(function(){return u}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var h=r.a.createContext({}),c=function(e){var t=r.a.useContext(h),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),p=c(a),u=n,m=p["".concat(o,".").concat(u)]||p[u]||d[u]||i;return a?r.a.createElement(m,s(s({ref:t},h),{},{components:a})):r.a.createElement(m,s({ref:t},h))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var h=2;h<i;h++)o[h]=a[h];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"},250:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/graph-d4e892234a5b20494c646218176a0f9e.png"}}]);