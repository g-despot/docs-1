(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{119:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",(function(){return r})),n.d(a,"metadata",(function(){return o})),n.d(a,"toc",(function(){return c})),n.d(a,"default",(function(){return d}));var t=n(3),l=n(7),i=(n(0),n(180)),r={id:"reference-guide",title:"Style script reference guide",sidebar_label:"Reference guide"},o={unversionedId:"style-script/reference-guide",id:"style-script/reference-guide",isDocsHomePage:!1,title:"Style script reference guide",description:"Style script is a language for customizing the visual display of graphs. The main",source:"@site/lab/style-script/reference-guide.md",slug:"/style-script/reference-guide",permalink:"/memgraph-lab/style-script/reference-guide",editUrl:"https://github.com/memgraph/docs/tree/master/lab/style-script/reference-guide.md",version:"current",sidebar_label:"Reference guide",sidebar:"lab",previous:{title:"Quick start guide to Style script",permalink:"/memgraph-lab/style-script/quick-start"},next:{title:"Changelog",permalink:"/memgraph-lab/changelog"}},c=[{value:"Expressions",id:"expressions",children:[]},{value:"Directives",id:"directives",children:[{value:"<code>@NodeStyle</code>",id:"nodestyle",children:[]},{value:"<code>@EdgeStyle</code>",id:"edgestyle",children:[]}]},{value:"File Structure",id:"file-structure",children:[]},{value:"Builtin functions",id:"builtin-functions",children:[{value:"<code>Add(value1, [value2, value3,...])</code>",id:"addvalue1-value2-value3",children:[]},{value:"<code>And(value1, [value2, value3,...])</code>",id:"andvalue1-value2-value3",children:[]},{value:"<code>Array([value1, value2,...])</code>",id:"arrayvalue1-value2",children:[]},{value:"<code>AsNumber(value)</code>",id:"asnumbervalue",children:[]},{value:"<code>AsText(value)</code>",id:"astextvalue",children:[]},{value:"<code>Blue(color)</code>",id:"bluecolor",children:[]},{value:"<code>Call(f, [arg1, arg2,...])</code>",id:"callf-arg1-arg2",children:[]},{value:"<code>Contains?(array, value)</code>",id:"containsarray-value",children:[]},{value:"<code>Concat(string1, [string2, string3,...])</code>",id:"concatstring1-string2-string3",children:[]},{value:"<code>Darker(color)</code>",id:"darkercolor",children:[]},{value:"<code>Define(name, value)</code>",id:"definename-value",children:[]},{value:"<code>Div(value1, value2)</code>",id:"divvalue1-value2",children:[]},{value:"<code>Do(exp1, [exp2, exp3,...])</code>",id:"doexp1-exp2-exp3",children:[]},{value:"<code>Equals?(value1, value2)</code>",id:"equalsvalue1-value2",children:[]},{value:"<code>Error(message)</code>",id:"errormessage",children:[]},{value:"<code>Exp(value)</code>",id:"expvalue",children:[]},{value:"<code>Format(formatString, [val1, val2,...])</code>",id:"formatformatstring-val1-val2",children:[]},{value:"<code>Function([arg1, arg2,...], body)</code>",id:"functionarg1-arg2-body",children:[]},{value:"<code>Get(obj, key)</code>",id:"getobj-key",children:[]},{value:"<code>Greater?(value1, value2)</code>",id:"greatervalue1-value2",children:[]},{value:"<code>Green(color)</code>",id:"greencolor",children:[]},{value:"<code>HasLabel?(node, label)</code>",id:"haslabelnode-label",children:[]},{value:"<code>HasProperty?(nodeOrEdge, propertyName)</code>",id:"haspropertynodeoredge-propertyname",children:[]},{value:"<code>Identity(node)</code>",id:"identitynode",children:[]},{value:"<code>If(condition, than, else)</code>",id:"ifcondition-than-else",children:[]},{value:"<code>Labels(node)</code>",id:"labelsnode",children:[]},{value:"<code>Less?(value1, value2)</code>",id:"lessvalue1-value2",children:[]},{value:"<code>Lighter(color)</code>",id:"lightercolor",children:[]},{value:"<code>Log(value)</code>",id:"logvalue",children:[]},{value:"<code>Log10(value)</code>",id:"log10value",children:[]},{value:"<code>LowerCase(string)</code>",id:"lowercasestring",children:[]},{value:"<code>Mix(color1, color2)</code>",id:"mixcolor1-color2",children:[]},{value:"<code>Mul(value1, [value2, value3,...])</code>",id:"mulvalue1-value2-value3",children:[]},{value:"<code>Not(value)</code>",id:"notvalue",children:[]},{value:"<code>Or(value1, [value2, value3,...])</code>",id:"orvalue1-value2-value3",children:[]},{value:"<code>Print([value1, value2,...])</code>",id:"printvalue1-value2",children:[]},{value:"<code>Property(nodeOrEdge, propertyName)</code>",id:"propertynodeoredge-propertyname",children:[]},{value:"<code>Random()</code>",id:"random",children:[]},{value:"<code>RandomElement(array)</code>",id:"randomelementarray",children:[]},{value:"<code>RandomInteger(bound)</code>",id:"randomintegerbound",children:[]},{value:"<code>Red(color)</code>",id:"redcolor",children:[]},{value:"<code>RGB(red, green, blue)</code>",id:"rgbred-green-blue",children:[]},{value:"<code>Size(value)</code>",id:"sizevalue",children:[]},{value:"<code>Sqrt(value)</code>",id:"sqrtvalue",children:[]},{value:"<code>Sub(value1, value2)</code>",id:"subvalue1-value2",children:[]},{value:"<code>Type(edge)</code>",id:"typeedge",children:[]},{value:"<code>TypeOf(value)</code>",id:"typeofvalue",children:[]},{value:"<code>UpperCase(string)</code>",id:"uppercasestring",children:[]}]}],p={toc:c};function d(e){var a=e.components,n=Object(l.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},p,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("p",null,"Style script is a language for customizing the visual display of graphs. The main\nbuilding blocks of style script are expressions and directives. Style script\nfiles are a sequence of expressions and directives."),Object(i.a)("h2",{id:"expressions"},"Expressions"),Object(i.a)("p",null,"Expressions are used to combine values to create new values using functions. For\nexample expression"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},"Add(2, 5) \n  -> 7\n")),Object(i.a)("p",null,"creates a new value 7 from values 2 and 5. There are a lot of functions built into style script so there are even more ways to combine values. There is even a\nfunction to create new functions."),Object(i.a)("p",null,"When expressions are evaluated, values are created. There are several types of\nstyle script values: ",Object(i.a)("inlineCode",{parentName:"p"},"Boolean"),", ",Object(i.a)("inlineCode",{parentName:"p"},"Color"),", ",Object(i.a)("inlineCode",{parentName:"p"},"Number"),", ",Object(i.a)("inlineCode",{parentName:"p"},"String"),", ",Object(i.a)("inlineCode",{parentName:"p"},"Array"),",\n",Object(i.a)("inlineCode",{parentName:"p"},"Dictionary"),", ",Object(i.a)("inlineCode",{parentName:"p"},"Function"),"and ",Object(i.a)("inlineCode",{parentName:"p"},"Null"),"."),Object(i.a)("p",null,"An expression can be either literal expressions, name expressions or function\napplications. Literal expressions exist for ",Object(i.a)("inlineCode",{parentName:"p"},"Color"),"s, ",Object(i.a)("inlineCode",{parentName:"p"},"Number"),"s and ",Object(i.a)("inlineCode",{parentName:"p"},"String"),"s. "),Object(i.a)("p",null,"This is a literal expression for ",Object(i.a)("inlineCode",{parentName:"p"},"String"),"s."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},'"Hello"\n  -> Hello\n')),Object(i.a)("p",null,"It evaluates to the value ",Object(i.a)("inlineCode",{parentName:"p"},'"Hello"')," of type ",Object(i.a)("inlineCode",{parentName:"p"},"String"),". The newline character and\ndouble quotes can be escaped in strings using ","\\"," (backslash)."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},'"In the end he said: \\"I am Iron Man!\\""\n  -> In the end he said: "I am Iron Man!"\n')),Object(i.a)("p",null,"These are literal expressions for ",Object(i.a)("inlineCode",{parentName:"p"},"Number"),"s."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},"123\n  -> 123\n3.14159\n  -> 3.14159\n")),Object(i.a)("p",null,"Literal expressions for colors are hex strings starting with '#'. This is a\nliteral expression for the color red."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},"#ff0000\n  -> #ff0000\n")),Object(i.a)("p",null,"Name expressions are names that can be evaluated if there are values bound to\nthem in the environment (lexical scope). Names can start with any of the\nlower case or upper case letters of the English alphabet and apart from those can\ncontain digits and the following characters: ?, !, $, -, _, ., *. Names can be\ndefined using the ",Object(i.a)("inlineCode",{parentName:"p"},"Define")," function."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},'Define(superhero, "Iron Man")\nsuperhero\n  -> Iron Man\n')),Object(i.a)("p",null,"In the previous example the value ",Object(i.a)("inlineCode",{parentName:"p"},'"Iron Man"')," was bound to the name\n",Object(i.a)("inlineCode",{parentName:"p"},"superhero"),". After that name expression ",Object(i.a)("inlineCode",{parentName:"p"},"superhero")," evaluates to the value\n",Object(i.a)("inlineCode",{parentName:"p"},'"Iron Man"')," fo type ",Object(i.a)("inlineCode",{parentName:"p"},"String"),"."),Object(i.a)("p",null,"There are many built-in names that are bound to useful values. Most used are\nboolean values which are bound to ",Object(i.a)("inlineCode",{parentName:"p"},"True")," and ",Object(i.a)("inlineCode",{parentName:"p"},"False")," and null value which is\nbound to ",Object(i.a)("inlineCode",{parentName:"p"},"Null"),". Also, all the CSS web colors are bound to their names."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},"dodgerblue\n  -> #1e90ff\nforestgreen\n  -> #228b22\n")),Object(i.a)("p",null,"The third type of expressions are function application expressions. A function can\nbe applied to the list of expressions (arguments) in the following way."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},'Concat("Agents", " ", "of", " ", "S.H.I.E.L.D.")\n  -> Agents of S.H.I.E.L.D.\n')),Object(i.a)("p",null,"Here the function ",Object(i.a)("inlineCode",{parentName:"p"},"Concat")," was applied to the list of string literal expressions\nto produce their concatenation. Any expression can be an argument."),Object(i.a)("p",null,"Not all expressions have to be evaluated. For example, when calling ",Object(i.a)("inlineCode",{parentName:"p"},"If"),"\nfunction one argument will not be evaluated."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},'Define(mood, "happy")\nDefine(name, "Happy Hogan")\nIf(Equals?(mood, "happy"),\n   Format("{} is happy today.", name),\n   Format("{} is not happy today.", name))\n  -> Happy Hogan is happy today.\n')),Object(i.a)("p",null,"In the previous example expression ",Object(i.a)("inlineCode",{parentName:"p"},'Format("{} is not happy today", name)')," will\nnot be evaluated because its value is not needed."),Object(i.a)("p",null,"Some other function will not evaluate their arguments because they are\ninterested in their names and not values. For example, when creating a new\nfunction argument names aren't evaluated, but are remembered to be later bound\nto the function arguments when the function is called."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},"Define(square, Fucntion(x, Mul(x, x)))\nsquare(2)\n  -> 4\n")),Object(i.a)("p",null,"In the previous example the name ",Object(i.a)("inlineCode",{parentName:"p"},"x")," isn't evaluated in the first line, and\nneither is the expression ",Object(i.a)("inlineCode",{parentName:"p"},"Mul(x, x)"),". In the second line when the function ",Object(i.a)("inlineCode",{parentName:"p"},"square"),"\nis called number 2 will be bound to the name ",Object(i.a)("inlineCode",{parentName:"p"},"x")," and only then will ",Object(i.a)("inlineCode",{parentName:"p"},"Mul(x, x)"),"\nbe evaluated."),Object(i.a)("h2",{id:"directives"},"Directives"),Object(i.a)("p",null,"Directives are the second building block of style script. Directive names start\nwith '@'. The name is followed by the optional expression (filter) which is\nfollowed by an opening curly brace, directive body and a closing curly brace.\nThe directive body is a list of pairs of property names and expressions.\nProperty names and expressions are separated by a colon and after every\nexpression a newline must follow. The directive structure is the following."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},"@<DirectiveName> <expression>? {\n  <property-name-1>: <expression-1>\n  ...\n  ...\n  <property-name-n>: <expression-n>\n}\n")),Object(i.a)("p",null,"Like in CSS, directives defined later override properties of the previous\ndirectives. "),Object(i.a)("p",null,"Style script currently has two directives: ",Object(i.a)("inlineCode",{parentName:"p"},"@NodeStyle"),", for defining visual\nstyle of graph nodes, and ",Object(i.a)("inlineCode",{parentName:"p"},"@EdgeStyle")," for defining visual style of graph edges."),Object(i.a)("p",null,"An example of a directive is ",Object(i.a)("inlineCode",{parentName:"p"},"@NodeStyle")," directive which can be used to specify\nstyle properties of a graph node."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},'@NodeStyle {\n  border-width: 2\n  color: #abcdef\n  label: "Hello, World!"\n}\n')),Object(i.a)("h3",{id:"nodestyle"},Object(i.a)("inlineCode",{parentName:"h3"},"@NodeStyle")),Object(i.a)("p",null,Object(i.a)("inlineCode",{parentName:"p"},"@NodeStyle")," directive is used for defining style properties of a graph node. It\nis possible to filter the nodes to which the directive applies by providing an\noptional predicate after directive name and before the opening curly brace. "),Object(i.a)("p",null,"Before any expressions are evaluated (including the predicate) the name ",Object(i.a)("inlineCode",{parentName:"p"},"node"),"\nis bound to the graph node for which the directive is being evaluated. Graph\nnode is of type ",Object(i.a)("inlineCode",{parentName:"p"},"Dictionary")," and has all information about the node (properties,\nlabels)."),Object(i.a)("p",null,"Here is an example of ",Object(i.a)("inlineCode",{parentName:"p"},"@NodeStyle")," directive that is applied to all graph nodes\nwith the label superhero"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},'@NodeStyle HasLabel?(node, vehicle) {\n  label: Format("{}, horsepower: {}", \n                Property(node, "model"),\n                Property(node, "horsepower"))\n}\n')),Object(i.a)("p",null,"Predicate can be any expression that returns a value of type ",Object(i.a)("inlineCode",{parentName:"p"},"Boolean"),". It\nshould depend on ",Object(i.a)("inlineCode",{parentName:"p"},"node"),", because if it doesn't, it will either be applied to all\nnodes or to no nodes."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},'@NodeStyle And(HasProperty(node, "name"),\n               Equals?(Property(node, "name"), "Tony Stark")) {\n  color: gold\n  shadow-color: red\n  label: "You know who I am"\n}\n')),Object(i.a)("p",null,"Here is the list of all properties that can be defined in the ",Object(i.a)("inlineCode",{parentName:"p"},"@NodeStyle"),"\ndirective, along with their expected types."),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"border-color"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"border-color-hover"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"border-color-selected"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"border-width"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"border-width-selected"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"color"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"color-hover"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"color-selected"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"font-background-color"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"font-color"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"font-family"),": ",Object(i.a)("inlineCode",{parentName:"li"},"String")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"font-size"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"image-url"),": ",Object(i.a)("inlineCode",{parentName:"li"},"String")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"image-url-selected"),": ",Object(i.a)("inlineCode",{parentName:"li"},"String")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"label"),": ",Object(i.a)("inlineCode",{parentName:"li"},"String")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"shadow-color"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"shadow-size"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"shadow-offset-x"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"shadow-offset-y"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"shape"),": ",Object(i.a)("inlineCode",{parentName:"li"},"String")," (",Object(i.a)("inlineCode",{parentName:"li"},'"dot"'),", ",Object(i.a)("inlineCode",{parentName:"li"},'"square"'),", ",Object(i.a)("inlineCode",{parentName:"li"},'"diamond"'),", ",Object(i.a)("inlineCode",{parentName:"li"},'"triangle"'),",\n",Object(i.a)("inlineCode",{parentName:"li"},'"triangleDown"'),", ",Object(i.a)("inlineCode",{parentName:"li"},'"star"'),")"),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"size"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("h3",{id:"edgestyle"},Object(i.a)("inlineCode",{parentName:"h3"},"@EdgeStyle")),Object(i.a)("p",null,Object(i.a)("inlineCode",{parentName:"p"},"@EdgeStyle")," directive is used for defining style properties of a graph edge.\nMost things work like ",Object(i.a)("inlineCode",{parentName:"p"},"@NodeStyle")," directive with one exception: the directive\nwill bind the name ",Object(i.a)("inlineCode",{parentName:"p"},"edge")," to the edge for which the directive is being\nevaluated (",Object(i.a)("inlineCode",{parentName:"p"},"@NodeStyle")," binds the name ",Object(i.a)("inlineCode",{parentName:"p"},"node"),")."),Object(i.a)("p",null,"Here is the list of all properties that can be defined in the ",Object(i.a)("inlineCode",{parentName:"p"},"@EdgeStyle"),"\ndirective, along with their expected types."),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"arrow-size"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"color"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"color-hover"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"color-selected"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"font-background-color"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"font-color"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"font-family"),": ",Object(i.a)("inlineCode",{parentName:"li"},"String")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"font-size"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"label"),": ",Object(i.a)("inlineCode",{parentName:"li"},"String")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"shadow-color"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"shadow-size"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"shadow-offset-x"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"shadow-offset-y"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"type"),": ",Object(i.a)("inlineCode",{parentName:"li"},"String")," (",Object(i.a)("inlineCode",{parentName:"li"},'"straight"')," or ",Object(i.a)("inlineCode",{parentName:"li"},'"smooth"'),")"),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"width"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"width-hover"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"width-selected"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("h2",{id:"file-structure"},"File Structure"),Object(i.a)("p",null,"Style script files are composed of expressions and directives. All expressions\noutside directives are evaluated first in the global environment. This is useful\nfor defining names using function ",Object(i.a)("inlineCode",{parentName:"p"},"Define"),". After that ",Object(i.a)("inlineCode",{parentName:"p"},"@NodeStyle")," and\n",Object(i.a)("inlineCode",{parentName:"p"},"@EdgeStyle")," directives are evaluated for each node and edge, respectively. All\nthe names in the global environment are visible while applying the directives so\nthey can be used for defining property values inside directives."),Object(i.a)("p",null,"Example."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},'Define(square, Function(x, Mul(x, x)))\nDefine(maxAllowedDebt, 10000)\n\n@NodeStyle HasLabel?(node, "BankUser") {\n  size: square(Property(node, "debt"))\n  color: If(Greater?(Property(node, "debt"), maxAllowedDebt),\n            red,\n            lightblue)\n}\n')),Object(i.a)("p",null,"Names ",Object(i.a)("inlineCode",{parentName:"p"},"square")," and ",Object(i.a)("inlineCode",{parentName:"p"},"maxAllowedDebt")," are visible inside ",Object(i.a)("inlineCode",{parentName:"p"},"@NodeStyle")," directive."),Object(i.a)("h2",{id:"builtin-functions"},"Builtin functions"),Object(i.a)("h3",{id:"addvalue1-value2-value3"},Object(i.a)("inlineCode",{parentName:"h3"},"Add(value1, [value2, value3,...])")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value1"),", ",Object(i.a)("inlineCode",{parentName:"li"},"value2"),", ",Object(i.a)("inlineCode",{parentName:"li"},"value3"),", ",Object(i.a)("inlineCode",{parentName:"li"},"..."),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("p",null,"Returns the sum of given values."),Object(i.a)("h3",{id:"andvalue1-value2-value3"},Object(i.a)("inlineCode",{parentName:"h3"},"And(value1, [value2, value3,...])")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value1"),", ",Object(i.a)("inlineCode",{parentName:"li"},"value2"),", ",Object(i.a)("inlineCode",{parentName:"li"},"value3"),", ",Object(i.a)("inlineCode",{parentName:"li"},"..."),": ",Object(i.a)("inlineCode",{parentName:"li"},"Boolean")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Boolean"))),Object(i.a)("p",null,"Returns ",Object(i.a)("inlineCode",{parentName:"p"},"True")," if all of the given values are ",Object(i.a)("inlineCode",{parentName:"p"},"True"),". Returns ",Object(i.a)("inlineCode",{parentName:"p"},"False")," otherwise.\nExpressions after first expression that evaluates to ",Object(i.a)("inlineCode",{parentName:"p"},"False")," are not evaluated."),Object(i.a)("h3",{id:"arrayvalue1-value2"},Object(i.a)("inlineCode",{parentName:"h3"},"Array([value1, value2,...])")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value1"),", ",Object(i.a)("inlineCode",{parentName:"li"},"value2"),", ",Object(i.a)("inlineCode",{parentName:"li"},"..."),": ",Object(i.a)("inlineCode",{parentName:"li"},"Any")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Array"))),Object(i.a)("p",null,"Creates and returns an array of given values."),Object(i.a)("h3",{id:"asnumbervalue"},Object(i.a)("inlineCode",{parentName:"h3"},"AsNumber(value)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value"),": ",Object(i.a)("inlineCode",{parentName:"li"},"String")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("p",null,"Parses the given string and returns a number. The string should contain only one\nnumber in base 10 and nothing else."),Object(i.a)("h3",{id:"astextvalue"},Object(i.a)("inlineCode",{parentName:"h3"},"AsText(value)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Any")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"String"))),Object(i.a)("p",null,"Returns a textual representation of given value."),Object(i.a)("h3",{id:"bluecolor"},Object(i.a)("inlineCode",{parentName:"h3"},"Blue(color)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"color"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("p",null,"Returns blue component of given color. The value will be between 0 and 255 (both\ninclusive)."),Object(i.a)("h3",{id:"callf-arg1-arg2"},Object(i.a)("inlineCode",{parentName:"h3"},"Call(f, [arg1, arg2,...])")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"f"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Function")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"arg1"),", ",Object(i.a)("inlineCode",{parentName:"li"},"arg2"),", ",Object(i.a)("inlineCode",{parentName:"li"},"..."),": ",Object(i.a)("inlineCode",{parentName:"li"},"Any"))),Object(i.a)("p",null,"Calls function ",Object(i.a)("inlineCode",{parentName:"p"},"f")," with given arguments and returns ",Object(i.a)("inlineCode",{parentName:"p"},"f(arg1, arg2,...)"),"."),Object(i.a)("h3",{id:"containsarray-value"},Object(i.a)("inlineCode",{parentName:"h3"},"Contains?(array, value)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"array"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Array")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Any")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Boolean"))),Object(i.a)("p",null,"Returns ",Object(i.a)("inlineCode",{parentName:"p"},"True")," if ",Object(i.a)("inlineCode",{parentName:"p"},"array")," contains ",Object(i.a)("inlineCode",{parentName:"p"},"value"),", ",Object(i.a)("inlineCode",{parentName:"p"},"False")," otherwise."),Object(i.a)("h3",{id:"concatstring1-string2-string3"},Object(i.a)("inlineCode",{parentName:"h3"},"Concat(string1, [string2, string3,...])")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"string1"),", ",Object(i.a)("inlineCode",{parentName:"li"},"string2"),", ",Object(i.a)("inlineCode",{parentName:"li"},"string3"),", ",Object(i.a)("inlineCode",{parentName:"li"},"..."),": ",Object(i.a)("inlineCode",{parentName:"li"},"String")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"String"))),Object(i.a)("p",null,"Concatanetes given strings."),Object(i.a)("h3",{id:"darkercolor"},Object(i.a)("inlineCode",{parentName:"h3"},"Darker(color)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"color"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Color"))),Object(i.a)("p",null,"Returns a darker version of the given color."),Object(i.a)("h3",{id:"definename-value"},Object(i.a)("inlineCode",{parentName:"h3"},"Define(name, value)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"name"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Name")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Any"))),Object(i.a)("p",null,"Binds the given value to the given name. Names cannot be redefined."),Object(i.a)("h3",{id:"divvalue1-value2"},Object(i.a)("inlineCode",{parentName:"h3"},"Div(value1, value2)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value1"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value2"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("p",null,"Returns ",Object(i.a)("inlineCode",{parentName:"p"},"value1")," divided by ",Object(i.a)("inlineCode",{parentName:"p"},"value2"),"."),Object(i.a)("h3",{id:"doexp1-exp2-exp3"},Object(i.a)("inlineCode",{parentName:"h3"},"Do(exp1, [exp2, exp3,...])")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"exp1"),", ",Object(i.a)("inlineCode",{parentName:"li"},"exp2"),", ",Object(i.a)("inlineCode",{parentName:"li"},"exp3"),", ",Object(i.a)("inlineCode",{parentName:"li"},"..."),": ",Object(i.a)("inlineCode",{parentName:"li"},"Any")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Any"))),Object(i.a)("p",null,"Evaluates all given expressions and returns the value of last one."),Object(i.a)("h3",{id:"equalsvalue1-value2"},Object(i.a)("inlineCode",{parentName:"h3"},"Equals?(value1, value2)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"val1"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Any")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"val2"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Any")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Any"))),Object(i.a)("p",null,"Returns ",Object(i.a)("inlineCode",{parentName:"p"},"True")," if given values are equal, ",Object(i.a)("inlineCode",{parentName:"p"},"False")," otherwise. ",Object(i.a)("inlineCode",{parentName:"p"},"Number"),"s,\n",Object(i.a)("inlineCode",{parentName:"p"},"String"),"s and ",Object(i.a)("inlineCode",{parentName:"p"},"Boolean"),"s are compared by value, while objects of all other types\nare compared by identity."),Object(i.a)("h3",{id:"errormessage"},Object(i.a)("inlineCode",{parentName:"h3"},"Error(message)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"message"),": ",Object(i.a)("inlineCode",{parentName:"li"},"String")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Never"))),Object(i.a)("p",null,"Throws an error with the given message."),Object(i.a)("h3",{id:"expvalue"},Object(i.a)("inlineCode",{parentName:"h3"},"Exp(value)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("p",null,"Returns 2.71828... raised to the power ",Object(i.a)("inlineCode",{parentName:"p"},"value"),"."),Object(i.a)("h3",{id:"formatformatstring-val1-val2"},Object(i.a)("inlineCode",{parentName:"h3"},"Format(formatString, [val1, val2,...])")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"formatString"),": ",Object(i.a)("inlineCode",{parentName:"li"},"String")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"val1"),", ",Object(i.a)("inlineCode",{parentName:"li"},"val2"),", ",Object(i.a)("inlineCode",{parentName:"li"},"..."),": ",Object(i.a)("inlineCode",{parentName:"li"},"Any")),Object(i.a)("li",{parentName:"ul"},"Returns: `String``")),Object(i.a)("p",null,"Substitutes occurences of curly brace pairs in ",Object(i.a)("inlineCode",{parentName:"p"},"formatString")," with textual\nrepresentations of given values. First occurrence is substituted with first\nvalue, second occurrence with second value and so on. "),Object(i.a)("p",null,"Examples:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},'Format("{}, {}!", "Hello", "World") \n  -> Hello, World!\n')),Object(i.a)("p",null,"Text inside curly braces is ignored."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},'Format("{name}: {age}", "Antun", 23)\n  -> Antun: 23\n')),Object(i.a)("h3",{id:"functionarg1-arg2-body"},Object(i.a)("inlineCode",{parentName:"h3"},"Function([arg1, arg2,...], body)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"arg1"),", ",Object(i.a)("inlineCode",{parentName:"li"},"arg2"),", ",Object(i.a)("inlineCode",{parentName:"li"},"..."),": ",Object(i.a)("inlineCode",{parentName:"li"},"Name")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"body"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Any")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Function"))),Object(i.a)("p",null,"Creates a function. ",Object(i.a)("inlineCode",{parentName:"p"},"body")," is the expression to evaluate when the function is\ncalled. All arguments except ",Object(i.a)("inlineCode",{parentName:"p"},"body")," are argument names of the function to\ncreate. When the created function is called names ",Object(i.a)("inlineCode",{parentName:"p"},"arg1"),", ",Object(i.a)("inlineCode",{parentName:"p"},"arg2"),", ",Object(i.a)("inlineCode",{parentName:"p"},"...")," are\nbound to function arguments and available in the ",Object(i.a)("inlineCode",{parentName:"p"},"body")," expression. This\nfunction is most useful in combination with ",Object(i.a)("inlineCode",{parentName:"p"},"Define"),"."),Object(i.a)("p",null,"Examples:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},'Define(makeGreeting, Function(firstName,\n  Format("Hello, {}!", firstName)))\nmakeGreeting("World")\n  -> Hello, World!\n')),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},"Define(pow, Function(x, n, \n  If(Equals?(n, 1),\n    x,\n    Mul(x, pow(x, Sub(n, 1))))))\npow(2, 10)\n  -> 1024\n")),Object(i.a)("h3",{id:"getobj-key"},Object(i.a)("inlineCode",{parentName:"h3"},"Get(obj, key)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"obj"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Array")," or ",Object(i.a)("inlineCode",{parentName:"li"},"Dictionary")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"key"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")," if ",Object(i.a)("inlineCode",{parentName:"li"},"obj")," is ",Object(i.a)("inlineCode",{parentName:"li"},"Array"),", ",Object(i.a)("inlineCode",{parentName:"li"},"String")," if ",Object(i.a)("inlineCode",{parentName:"li"},"obj")," is ",Object(i.a)("inlineCode",{parentName:"li"},"Dictionary")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Any"))),Object(i.a)("p",null,"If ",Object(i.a)("inlineCode",{parentName:"p"},"obj")," is ",Object(i.a)("inlineCode",{parentName:"p"},"Array"),", returns the element with index ",Object(i.a)("inlineCode",{parentName:"p"},"key")," of array ",Object(i.a)("inlineCode",{parentName:"p"},"obj"),"\n(indexing is zero based). If ",Object(i.a)("inlineCode",{parentName:"p"},"obj")," is ",Object(i.a)("inlineCode",{parentName:"p"},"Dictionary")," returns the value for key\n",Object(i.a)("inlineCode",{parentName:"p"},"key"),"."),Object(i.a)("h3",{id:"greatervalue1-value2"},Object(i.a)("inlineCode",{parentName:"h3"},"Greater?(value1, value2)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value1"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value2"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Boolean"))),Object(i.a)("p",null,"Returns ",Object(i.a)("inlineCode",{parentName:"p"},"True")," if ",Object(i.a)("inlineCode",{parentName:"p"},"value1")," is greater than ",Object(i.a)("inlineCode",{parentName:"p"},"value2"),", ",Object(i.a)("inlineCode",{parentName:"p"},"False")," otherwise."),Object(i.a)("h3",{id:"greencolor"},Object(i.a)("inlineCode",{parentName:"h3"},"Green(color)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"color"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("p",null,"Returns green component of given color. The value will be between 0 and 255\n(both inclusive)."),Object(i.a)("h3",{id:"haslabelnode-label"},Object(i.a)("inlineCode",{parentName:"h3"},"HasLabel?(node, label)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"node"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Dictionary")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"label"),": ",Object(i.a)("inlineCode",{parentName:"li"},"String")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Boolean"))),Object(i.a)("p",null,"Returns ",Object(i.a)("inlineCode",{parentName:"p"},"True")," if given graph node ",Object(i.a)("inlineCode",{parentName:"p"},"node")," has label ",Object(i.a)("inlineCode",{parentName:"p"},"label"),", ",Object(i.a)("inlineCode",{parentName:"p"},"False")," otherwise."),Object(i.a)("h3",{id:"haspropertynodeoredge-propertyname"},Object(i.a)("inlineCode",{parentName:"h3"},"HasProperty?(nodeOrEdge, propertyName)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"nodeOrEdge"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Dictionary")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"propertyName"),": ",Object(i.a)("inlineCode",{parentName:"li"},"String")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Boolean"))),Object(i.a)("p",null,"Returns ",Object(i.a)("inlineCode",{parentName:"p"},"True")," if given graph node or graph edge ",Object(i.a)("inlineCode",{parentName:"p"},"nodeOrEdge")," has property\n",Object(i.a)("inlineCode",{parentName:"p"},"propertyName"),"."),Object(i.a)("h3",{id:"identitynode"},Object(i.a)("inlineCode",{parentName:"h3"},"Identity(node)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"node"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Dictionary")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("p",null,"Returns the id of the given graph node."),Object(i.a)("h3",{id:"ifcondition-than-else"},Object(i.a)("inlineCode",{parentName:"h3"},"If(condition, than, else)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"condition"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Boolean")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"than"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Any")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"else"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Any")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Any"))),Object(i.a)("p",null,"If ",Object(i.a)("inlineCode",{parentName:"p"},"condition")," is ",Object(i.a)("inlineCode",{parentName:"p"},"True")," returns ",Object(i.a)("inlineCode",{parentName:"p"},"than"),", otherwise returns ",Object(i.a)("inlineCode",{parentName:"p"},"else"),"."),Object(i.a)("h3",{id:"labelsnode"},Object(i.a)("inlineCode",{parentName:"h3"},"Labels(node)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"node"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Dictionary")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Array"))),Object(i.a)("p",null,"Returns the array of labels of the given graph node."),Object(i.a)("h3",{id:"lessvalue1-value2"},Object(i.a)("inlineCode",{parentName:"h3"},"Less?(value1, value2)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value1"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value2"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Boolean"))),Object(i.a)("p",null,"Returns ",Object(i.a)("inlineCode",{parentName:"p"},"True")," if ",Object(i.a)("inlineCode",{parentName:"p"},"value1")," is less than ",Object(i.a)("inlineCode",{parentName:"p"},"value2"),", ",Object(i.a)("inlineCode",{parentName:"p"},"False")," otherwise."),Object(i.a)("h3",{id:"lightercolor"},Object(i.a)("inlineCode",{parentName:"h3"},"Lighter(color)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"color"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Color"))),Object(i.a)("p",null,"Returns a lighter version of the given color."),Object(i.a)("h3",{id:"logvalue"},Object(i.a)("inlineCode",{parentName:"h3"},"Log(value)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("p",null,"Returns the logarithm (to the base ",Object(i.a)("inlineCode",{parentName:"p"},"e"),") of ",Object(i.a)("inlineCode",{parentName:"p"},"value"),"."),Object(i.a)("h3",{id:"log10value"},Object(i.a)("inlineCode",{parentName:"h3"},"Log10(value)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("p",null,"Returns the logarithm (to the base 10) of ",Object(i.a)("inlineCode",{parentName:"p"},"value"),"."),Object(i.a)("h3",{id:"lowercasestring"},Object(i.a)("inlineCode",{parentName:"h3"},"LowerCase(string)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"string"),": ",Object(i.a)("inlineCode",{parentName:"li"},"String")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"String"))),Object(i.a)("p",null,"Returns the value of ",Object(i.a)("inlineCode",{parentName:"p"},"string")," converted to lower case."),Object(i.a)("h3",{id:"mixcolor1-color2"},Object(i.a)("inlineCode",{parentName:"h3"},"Mix(color1, color2)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"color1"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"color2"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Color"))),Object(i.a)("p",null,"Mixes given colors (performs linear interpolation)."),Object(i.a)("h3",{id:"mulvalue1-value2-value3"},Object(i.a)("inlineCode",{parentName:"h3"},"Mul(value1, [value2, value3,...])")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value1"),", ",Object(i.a)("inlineCode",{parentName:"li"},"value2"),", ",Object(i.a)("inlineCode",{parentName:"li"},"value3"),", ",Object(i.a)("inlineCode",{parentName:"li"},"..."),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("p",null,"Returns the product of given values."),Object(i.a)("h3",{id:"notvalue"},Object(i.a)("inlineCode",{parentName:"h3"},"Not(value)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Boolean")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Boolean"))),Object(i.a)("p",null,"Returns ",Object(i.a)("inlineCode",{parentName:"p"},"True")," if ",Object(i.a)("inlineCode",{parentName:"p"},"value")," is ",Object(i.a)("inlineCode",{parentName:"p"},"False"),", and returns ",Object(i.a)("inlineCode",{parentName:"p"},"False")," if ",Object(i.a)("inlineCode",{parentName:"p"},"value")," is ",Object(i.a)("inlineCode",{parentName:"p"},"True"),"."),Object(i.a)("h3",{id:"orvalue1-value2-value3"},Object(i.a)("inlineCode",{parentName:"h3"},"Or(value1, [value2, value3,...])")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value1"),", ",Object(i.a)("inlineCode",{parentName:"li"},"value2"),", ",Object(i.a)("inlineCode",{parentName:"li"},"value3"),", ",Object(i.a)("inlineCode",{parentName:"li"},"..."),": ",Object(i.a)("inlineCode",{parentName:"li"},"Boolean")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Boolean"))),Object(i.a)("p",null,"Returns ",Object(i.a)("inlineCode",{parentName:"p"},"True")," if any of the given values is ",Object(i.a)("inlineCode",{parentName:"p"},"True"),". Returns ",Object(i.a)("inlineCode",{parentName:"p"},"False")," otherwise.\nExpressions after first expression that evaluates to ",Object(i.a)("inlineCode",{parentName:"p"},"True")," are not evaluated."),Object(i.a)("h3",{id:"printvalue1-value2"},Object(i.a)("inlineCode",{parentName:"h3"},"Print([value1, value2,...])")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value1"),", ",Object(i.a)("inlineCode",{parentName:"li"},"value2"),", ",Object(i.a)("inlineCode",{parentName:"li"},"..."),": ",Object(i.a)("inlineCode",{parentName:"li"},"Any")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Null"))),Object(i.a)("p",null,"Logs the given values to the console."),Object(i.a)("h3",{id:"propertynodeoredge-propertyname"},Object(i.a)("inlineCode",{parentName:"h3"},"Property(nodeOrEdge, propertyName)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"nodeOrEdge"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Dictionary")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"propertyName"),": ",Object(i.a)("inlineCode",{parentName:"li"},"String")),Object(i.a)("li",{parentName:"ul"},"Returns: `Any``")),Object(i.a)("p",null,"Returns the property with name ",Object(i.a)("inlineCode",{parentName:"p"},"propertyName")," of given graph node or graph edge."),Object(i.a)("h3",{id:"random"},Object(i.a)("inlineCode",{parentName:"h3"},"Random()")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("p",null,"Returns a random number between 0 (inclusive) and 1 (exclusive). All the\npossible numbers are equally likely to be returned."),Object(i.a)("h3",{id:"randomelementarray"},Object(i.a)("inlineCode",{parentName:"h3"},"RandomElement(array)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"array"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Array")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Any"))),Object(i.a)("p",null,"Returns a random element of the given array. All the elements are equally likely\nto be chosen."),Object(i.a)("h3",{id:"randomintegerbound"},Object(i.a)("inlineCode",{parentName:"h3"},"RandomInteger(bound)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"bound"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("p",null,"Returns a random integer between 0 (inclusive) and ",Object(i.a)("inlineCode",{parentName:"p"},"bound")," (exclusive). All the\npossible numbers are equally likely to be returned."),Object(i.a)("h3",{id:"redcolor"},Object(i.a)("inlineCode",{parentName:"h3"},"Red(color)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"color"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Color")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("p",null,"Returns red component of given color. The value will be between 0 and 255 (both\ninclusive)."),Object(i.a)("h3",{id:"rgbred-green-blue"},Object(i.a)("inlineCode",{parentName:"h3"},"RGB(red, green, blue)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"red"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"green"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"blue"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Color"))),Object(i.a)("p",null,"Creates a new color with given components."),Object(i.a)("h3",{id:"sizevalue"},Object(i.a)("inlineCode",{parentName:"h3"},"Size(value)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Array"),", ",Object(i.a)("inlineCode",{parentName:"li"},"Dictionary")," or ",Object(i.a)("inlineCode",{parentName:"li"},"String")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("p",null,"If ",Object(i.a)("inlineCode",{parentName:"p"},"value")," is of type ",Object(i.a)("inlineCode",{parentName:"p"},"Array")," or ",Object(i.a)("inlineCode",{parentName:"p"},"Dictionary"),", returns its size. If ",Object(i.a)("inlineCode",{parentName:"p"},"value")," is\nof type ",Object(i.a)("inlineCode",{parentName:"p"},"String"),", returns its length;"),Object(i.a)("h3",{id:"sqrtvalue"},Object(i.a)("inlineCode",{parentName:"h3"},"Sqrt(value)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("p",null,"Returns the square root of ",Object(i.a)("inlineCode",{parentName:"p"},"value"),"."),Object(i.a)("h3",{id:"subvalue1-value2"},Object(i.a)("inlineCode",{parentName:"h3"},"Sub(value1, value2)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value1"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value2"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Number")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"Number"))),Object(i.a)("p",null,"Returns ",Object(i.a)("inlineCode",{parentName:"p"},"value1")," minus ",Object(i.a)("inlineCode",{parentName:"p"},"value2"),"."),Object(i.a)("h3",{id:"typeedge"},Object(i.a)("inlineCode",{parentName:"h3"},"Type(edge)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"edge"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Dictionary")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"String"))),Object(i.a)("p",null,"Returns the type of the given graph edge."),Object(i.a)("h3",{id:"typeofvalue"},Object(i.a)("inlineCode",{parentName:"h3"},"TypeOf(value)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"value"),": ",Object(i.a)("inlineCode",{parentName:"li"},"Any")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"String"))),Object(i.a)("p",null,"Returns the type of the given value."),Object(i.a)("h3",{id:"uppercasestring"},Object(i.a)("inlineCode",{parentName:"h3"},"UpperCase(string)")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"string"),": ",Object(i.a)("inlineCode",{parentName:"li"},"String")),Object(i.a)("li",{parentName:"ul"},"Returns: ",Object(i.a)("inlineCode",{parentName:"li"},"String"))),Object(i.a)("p",null,"Returns the value of ",Object(i.a)("inlineCode",{parentName:"p"},"string")," converted to upper case."))}d.isMDXComponent=!0},180:function(e,a,n){"use strict";n.d(a,"a",(function(){return m}));var t=n(0),l=n.n(t);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function c(e,a){if(null==e)return{};var n,t,l=function(e,a){if(null==e)return{};var n,t,l={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=l.a.createContext({}),d=function(e){var a=l.a.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},b={inlineCode:"code",wrapper:function(e){var a=e.children;return l.a.createElement(l.a.Fragment,{},a)}},u=l.a.forwardRef((function(e,a){var n=e.components,t=e.mdxType,i=e.originalType,r=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=d(n),m=t,O=u["".concat(r,".").concat(m)]||u[m]||b[m]||i;return n?l.a.createElement(O,o(o({ref:a},p),{},{components:n})):l.a.createElement(O,o({ref:a},p))}));function m(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var i=n.length,r=new Array(i);r[0]=u;var o={};for(var c in a)hasOwnProperty.call(a,c)&&(o[c]=a[c]);o.originalType=e,o.mdxType="string"==typeof e?e:t,r[1]=o;for(var p=2;p<i;p++)r[p]=n[p];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);