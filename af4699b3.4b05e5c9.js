(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{147:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return s}));var a=n(3),r=n(7),l=(n(0),n(180)),i={id:"delete",title:"DELETE clause",sidebar_label:"DELETE"},c={unversionedId:"clauses/delete",id:"clauses/delete",isDocsHomePage:!1,title:"DELETE clause",description:"The DELETE clause is used to delete nodes and edges from the database.",source:"@site/cypher-manual/clauses/delete.md",slug:"/clauses/delete",permalink:"/cypher-manual/clauses/delete",editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/clauses/delete.md",version:"current",sidebar_label:"DELETE",sidebar:"cypher_manual",previous:{title:"CREATE clause",permalink:"/cypher-manual/clauses/create"},next:{title:"MATCH clause",permalink:"/cypher-manual/clauses/match"}},o=[{value:"Data Set",id:"data-set",children:[]},{value:"1. Deleting a node",id:"1-deleting-a-node",children:[]},{value:"2. Deleting a node and its relationships",id:"2-deleting-a-node-and-its-relationships",children:[]},{value:"3. Deleting a relationship",id:"3-deleting-a-relationship",children:[]},{value:"4. Deleting everything",id:"4-deleting-everything",children:[]},{value:"Data set Queries",id:"data-set-queries",children:[]}],p={toc:o};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.a)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(l.a)("p",null,"The ",Object(l.a)("inlineCode",{parentName:"p"},"DELETE")," clause is used to delete nodes and edges from the database."),Object(l.a)("ol",null,Object(l.a)("li",{parentName:"ol"},Object(l.a)("a",{parentName:"li",href:"#1-deleting-a-node"},"Deleting a node")),Object(l.a)("li",{parentName:"ol"},Object(l.a)("a",{parentName:"li",href:"#2-deleting-a-node-and-its-relationships"},"Deleting a node and its relationships")),Object(l.a)("li",{parentName:"ol"},Object(l.a)("a",{parentName:"li",href:"#3-deleting-a-relationship"},"Deleting a relationship")),Object(l.a)("li",{parentName:"ol"},Object(l.a)("a",{parentName:"li",href:"#4-deleting-everything"},"Deleting everything"))),Object(l.a)("h2",{id:"data-set"},"Data Set"),Object(l.a)("p",null,"The following examples are executed with this data set. You can create this data set\nlocally by executing the queries at the end of the page: ",Object(l.a)("a",{parentName:"p",href:"#data-set-queries"},"Data Set"),"."),Object(l.a)("img",{src:"https://raw.githubusercontent.com/g-despot/images/master/data_set.png",alt:"Data set",style:{height:380}}),Object(l.a)("h2",{id:"1-deleting-a-node"},"1. Deleting a node"),Object(l.a)("p",null,"The ",Object(l.a)("inlineCode",{parentName:"p"},"DELETE")," clause can be used to delete a node."),Object(l.a)("pre",null,Object(l.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country { name: 'United Kingdom' })\nDELETE c;\n")),Object(l.a)("p",null,"Output:"),Object(l.a)("pre",null,Object(l.a)("code",{parentName:"pre"},"Failed to remove node because of it's existing connections. Consider using DETACH DELETE.\n")),Object(l.a)("p",null,"This will however result in an error because ",Object(l.a)("inlineCode",{parentName:"p"},"DELETE")," can only be used on nodes that have no relationships."),Object(l.a)("h2",{id:"2-deleting-a-node-and-its-relationships"},"2. Deleting a node and its relationships"),Object(l.a)("p",null,"The ",Object(l.a)("inlineCode",{parentName:"p"},"DELETE")," clause can be used to delete a node along with all of its relationships with the keyword ",Object(l.a)("inlineCode",{parentName:"p"},"DETACH"),"."),Object(l.a)("pre",null,Object(l.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:Country { name: 'United Kingdom' })\nDETACH DELETE n;\n")),Object(l.a)("p",null,"Output:"),Object(l.a)("pre",null,Object(l.a)("code",{parentName:"pre"},"Empty set (0.001 sec)\n")),Object(l.a)("h2",{id:"3-deleting-a-relationship"},"3. Deleting a relationship"),Object(l.a)("p",null,"The ",Object(l.a)("inlineCode",{parentName:"p"},"DELETE")," clause can be used to delete a relationship."),Object(l.a)("pre",null,Object(l.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:Country { name: 'Germany' })-[r:LIVING_IN]-()\nDELETE r;\n")),Object(l.a)("p",null,"Output:"),Object(l.a)("pre",null,Object(l.a)("code",{parentName:"pre"},"Empty set (0.003 sec)\n")),Object(l.a)("h2",{id:"4-deleting-everything"},"4. Deleting everything"),Object(l.a)("p",null,"To delete all nodes and relationships in a graph, use the following query."),Object(l.a)("pre",null,Object(l.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n)\nDETACH DELETE n;\n")),Object(l.a)("p",null,"Output:"),Object(l.a)("pre",null,Object(l.a)("code",{parentName:"pre"},"Empty set (0.001 sec)\n")),Object(l.a)("h2",{id:"data-set-queries"},"Data set Queries"),Object(l.a)("p",null,"We encourage you to try out the examples by yourself.\nYou can get our data set locally by executing the following query block."),Object(l.a)("pre",null,Object(l.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) DETACH DELETE n;\n\nCREATE (c1:Country { name: 'Germany', language: 'German', continent: 'Europe', population: 83000000 });\nCREATE (c2:Country { name: 'France', language: 'French', continent: 'Europe', population: 67000000 });\nCREATE (c3:Country { name: 'United Kingdom', language: 'English', continent: 'Europe', population: 66000000 });\n\nMATCH (c1),(c2)\nWHERE c1.name= 'Germany' AND c2.name = 'France'\nCREATE (c2)<-[:WORKING_IN { date_of_start: 2014 }]-(p:Person { name: 'John' })-[:LIVING_IN { date_of_start: 2014 }]->(c1);\n\nMATCH (c)\nWHERE c.name= 'United Kingdom'\nCREATE (c)<-[:WORKING_IN { date_of_start: 2014 }]-(p:Person { name: 'Harry' })-[:LIVING_IN { date_of_start: 2013 }]->(c);\n\nMATCH (p1),(p2)\nWHERE p1.name = 'John' AND p2.name = 'Harry'\nCREATE (p1)-[:FRIENDS_WITH { date_of_start: 2011 }]->(p2);\n\nMATCH (p1),(p2)\nWHERE p1.name = 'John' AND p2.name = 'Harry'\nCREATE (p1)<-[:FRIENDS_WITH { date_of_start: 2012 }]-(:Person { name: 'Anna' })-[:FRIENDS_WITH { date_of_start: 2014 }]->(p2);\n\nMATCH (p),(c1),(c2)\nWHERE p.name = 'Anna' AND c1.name = 'United Kingdom' AND c2.name = 'Germany'\nCREATE (c2)<-[:LIVING_IN { date_of_start: 2014 }]-(p)-[:LIVING_IN { date_of_start: 2014 }]->(c1);\n\nMATCH (n)-[r]->(m) RETURN n,r,m;\n")))}s.isMDXComponent=!0},180:function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),s=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,b=d["".concat(i,".").concat(m)]||d[m]||u[m]||l;return n?r.a.createElement(b,c(c({ref:t},p),{},{components:n})):r.a.createElement(b,c({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=d;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<l;p++)i[p]=n[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);