(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{180:function(e,a,t){"use strict";t.d(a,"a",(function(){return m}));var n=t(0),r=t.n(n);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=r.a.createContext({}),s=function(e){var a=r.a.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):c(c({},a),e)),t},u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},d=r.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),d=s(t),m=n,b=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return t?r.a.createElement(b,c(c({ref:a},o),{},{components:t})):r.a.createElement(b,c({ref:a},o))}));function m(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,l=new Array(i);l[0]=d;var c={};for(var p in a)hasOwnProperty.call(a,p)&&(c[p]=a[p]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var o=2;o<i;o++)l[o]=t[o];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},76:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return l})),t.d(a,"metadata",(function(){return c})),t.d(a,"toc",(function(){return p})),t.d(a,"default",(function(){return s}));var n=t(3),r=t(7),i=(t(0),t(180)),l={id:"where",title:"WHERE clause",sidebar_label:"WHERE"},c={unversionedId:"clauses/where",id:"clauses/where",isDocsHomePage:!1,title:"WHERE clause",description:"WHERE isn't usually considered a standalone clause but rather a part of the MATCH, OPTIONAL MATCH and WITH clauses.",source:"@site/cypher-manual/clauses/where.md",slug:"/clauses/where",permalink:"/cypher-manual/clauses/where",editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/clauses/where.md",version:"current",sidebar_label:"WHERE",sidebar:"cypher_manual",previous:{title:"UNWIND clause",permalink:"/cypher-manual/clauses/unwind"},next:{title:"WITH clause",permalink:"/cypher-manual/clauses/with"}},p=[{value:"Data Set",id:"data-set",children:[]},{value:"1. Basic Usage",id:"1-basic-usage",children:[{value:"1.1 Boolean Operators",id:"11-boolean-operators",children:[]},{value:"1.2 Inequality Operators Operators",id:"12-inequality-operators-operators",children:[]},{value:"1.3 Filter with node labels",id:"13-filter-with-node-labels",children:[]},{value:"1.4 Filter with node properties",id:"14-filter-with-node-properties",children:[]},{value:"1.5 Filter with relationship properties",id:"15-filter-with-relationship-properties",children:[]},{value:"1.6 Check if property is not null",id:"16-check-if-property-is-not-null",children:[]}]},{value:"2. String matching",id:"2-string-matching",children:[]},{value:"3. Regular expressions",id:"3-regular-expressions",children:[]},{value:"Data set Queries",id:"data-set-queries",children:[]}],o={toc:p};function s(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(n.a)({},o,t,{components:a,mdxType:"MDXLayout"}),Object(i.a)("p",null,Object(i.a)("inlineCode",{parentName:"p"},"WHERE")," isn't usually considered a standalone clause but rather a part of the ",Object(i.a)("inlineCode",{parentName:"p"},"MATCH"),", ",Object(i.a)("inlineCode",{parentName:"p"},"OPTIONAL MATCH")," and ",Object(i.a)("inlineCode",{parentName:"p"},"WITH")," clauses."),Object(i.a)("p",null,"The difference when using ",Object(i.a)("inlineCode",{parentName:"p"},"WHERE")," with these clauses is that it only filter the results in the case of the ",Object(i.a)("inlineCode",{parentName:"p"},"WITH")," clause, while it adds constraints to the patterns described in the case of ",Object(i.a)("inlineCode",{parentName:"p"},"MATCH")," and ",Object(i.a)("inlineCode",{parentName:"p"},"OPTIONAL MATCH"),"."),Object(i.a)("p",null,Object(i.a)("inlineCode",{parentName:"p"},"WHERE")," is part of the directly preceding ",Object(i.a)("inlineCode",{parentName:"p"},"MATCH")," or ",Object(i.a)("inlineCode",{parentName:"p"},"OPTIONAL MATCH")," clause and should always be used like that to avoid problems with performance or results."),Object(i.a)("ol",null,Object(i.a)("li",{parentName:"ol"},Object(i.a)("a",{parentName:"li",href:"#1-basic-usage"},"Basic usage"),Object(i.a)("ol",{parentName:"li"},Object(i.a)("li",{parentName:"ol"},Object(i.a)("a",{parentName:"li",href:"#11-boolean-operators"},"Boolean Operators")),Object(i.a)("li",{parentName:"ol"},Object(i.a)("a",{parentName:"li",href:"#12-inequality-operators-operators"},"Inequality Operators Operators")),Object(i.a)("li",{parentName:"ol"},Object(i.a)("a",{parentName:"li",href:"#13-filter-with-node-labels"},"Filter with node labels")),Object(i.a)("li",{parentName:"ol"},Object(i.a)("a",{parentName:"li",href:"#14-filter-with-node-properties"},"Filter with node properties")),Object(i.a)("li",{parentName:"ol"},Object(i.a)("a",{parentName:"li",href:"#15-filter-with-relationship-properties"},"Filter with relationship properties")),Object(i.a)("li",{parentName:"ol"},Object(i.a)("a",{parentName:"li",href:"#16-check-if-property-is-not-null"},"Check if property is not null")))),Object(i.a)("li",{parentName:"ol"},Object(i.a)("a",{parentName:"li",href:"#2-string-matching"},"String matching")),Object(i.a)("li",{parentName:"ol"},Object(i.a)("a",{parentName:"li",href:"#3-regular-expressions"},"Regular Expressions"))),Object(i.a)("h2",{id:"data-set"},"Data Set"),Object(i.a)("p",null,"The following examples are executed with this data set. You can create this data set\nlocally by executing the queries at the end of the page: ",Object(i.a)("a",{parentName:"p",href:"#data-set-queries"},"Data Set"),"."),Object(i.a)("img",{src:"https://raw.githubusercontent.com/g-despot/images/master/data_set.png",alt:"Data set",style:{height:380}}),Object(i.a)("h2",{id:"1-basic-usage"},"1. Basic Usage"),Object(i.a)("h3",{id:"11-boolean-operators"},"1.1 Boolean Operators"),Object(i.a)("p",null,"Standard boolean operators like ",Object(i.a)("inlineCode",{parentName:"p"},"NOT"),", ",Object(i.a)("inlineCode",{parentName:"p"},"AND"),", ",Object(i.a)("inlineCode",{parentName:"p"},"OR")," and ",Object(i.a)("inlineCode",{parentName:"p"},"XOR")," can be used."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country)\nWHERE c.language = 'English' AND  c.continent = 'Europe'\nRETURN c.name;\n")),Object(i.a)("p",null,"Output:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},"+----------------+\n| c.name         |\n+----------------+\n| United Kingdom |\n+----------------+\n")),Object(i.a)("h3",{id:"12-inequality-operators-operators"},"1.2 Inequality Operators Operators"),Object(i.a)("p",null,"Standard inequality operators like ",Object(i.a)("inlineCode",{parentName:"p"},"<"),", ",Object(i.a)("inlineCode",{parentName:"p"},"<="),", ",Object(i.a)("inlineCode",{parentName:"p"},">")," and ",Object(i.a)("inlineCode",{parentName:"p"},">=")," can be used."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country)\nWHERE (c.population > 80000000)\nRETURN c.name;\n")),Object(i.a)("p",null,"Output:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},"+---------+\n| c.name  |\n+---------+\n| Germany |\n+---------+\n")),Object(i.a)("h3",{id:"13-filter-with-node-labels"},"1.3 Filter with node labels"),Object(i.a)("p",null,"Nodes can be filtered by their label using the ",Object(i.a)("inlineCode",{parentName:"p"},"WHERE")," clause instead of specifying it directly in the ",Object(i.a)("inlineCode",{parentName:"p"},"MATCH")," clause."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c)\nWHERE c:Country\nRETURN c.name;\n")),Object(i.a)("p",null,"Output:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},"+----------------+\n| c.name         |\n+----------------+\n| Germany        |\n| France         |\n| United Kingdom |\n+----------------+\n")),Object(i.a)("h3",{id:"14-filter-with-node-properties"},"1.4 Filter with node properties"),Object(i.a)("p",null,"Just as labels, node properties can be used in the WHERE clause to filter nodes."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country)\nWHERE c.population < 70000000\nRETURN c.name;\n")),Object(i.a)("p",null,"Output:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},"+----------------+\n| c.name         |\n+----------------+\n| France         |\n| United Kingdom |\n+----------------+\n")),Object(i.a)("h3",{id:"15-filter-with-relationship-properties"},"1.5 Filter with relationship properties"),Object(i.a)("p",null,"Just as with node properties, relationship properties can be used as filters."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (:Country {name: 'United Kingdom'})-[r]-(p)\nWHERE r.date_of_start = 2014\nRETURN p;\n")),Object(i.a)("p",null,"Output:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},'+---------------------------+\n| p                         |\n+---------------------------+\n| (:Person {name: "Harry"}) |\n| (:Person {name: "Anna"})  |\n+---------------------------+\n')),Object(i.a)("h3",{id:"16-check-if-property-is-not-null"},"1.6 Check if property is not null"),Object(i.a)("p",null,"To check if a node or relationship property exists use the ",Object(i.a)("inlineCode",{parentName:"p"},"IS NOT NULL")," option."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country)\nWHERE c.name = 'United Kingdom' AND c.population IS NOT NULL\nRETURN c.name, c.population;\n")),Object(i.a)("p",null,"Output:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},"+----------------+----------------+\n| c.name         | c.population   |\n+----------------+----------------+\n| United Kingdom | 66000000       |\n+----------------+----------------+\n")),Object(i.a)("h2",{id:"2-string-matching"},"2. String matching"),Object(i.a)("p",null,"Apart from comparison and concatenation operators openCypher provides special\nstring operators for easier matching of substrings:"),Object(i.a)("table",null,Object(i.a)("thead",{parentName:"table"},Object(i.a)("tr",{parentName:"thead"},Object(i.a)("th",{parentName:"tr",align:null},"Operator"),Object(i.a)("th",{parentName:"tr",align:null},"Description"))),Object(i.a)("tbody",{parentName:"table"},Object(i.a)("tr",{parentName:"tbody"},Object(i.a)("td",{parentName:"tr",align:null},Object(i.a)("inlineCode",{parentName:"td"},"a STARTS WITH b")),Object(i.a)("td",{parentName:"tr",align:null},"Returns true if the prefix of string a is equal to string b.")),Object(i.a)("tr",{parentName:"tbody"},Object(i.a)("td",{parentName:"tr",align:null},Object(i.a)("inlineCode",{parentName:"td"},"a ENDS WITH b")),Object(i.a)("td",{parentName:"tr",align:null},"Returns true if the suffix of string a is equal to string b.")),Object(i.a)("tr",{parentName:"tbody"},Object(i.a)("td",{parentName:"tr",align:null},Object(i.a)("inlineCode",{parentName:"td"},"a CONTAINS b")),Object(i.a)("td",{parentName:"tr",align:null},"Returns true if some substring of string a is equal to string b.")))),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country)\nWHERE c.name STARTS WITH 'G' AND NOT c.name CONTAINS 't'\nRETURN c.name;\n")),Object(i.a)("p",null,"Output:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},"+---------+\n| c.name  |\n+---------+\n| Germany |\n+---------+\n")),Object(i.a)("h2",{id:"3-regular-expressions"},"3. Regular expressions"),Object(i.a)("p",null,"Inside ",Object(i.a)("inlineCode",{parentName:"p"},"WHERE")," clause, you can use regular expressions for text filtering. To\nuse a regular expression, you need to use the ",Object(i.a)("inlineCode",{parentName:"p"},"=~")," operator."),Object(i.a)("p",null,"For example, finding all ",Object(i.a)("inlineCode",{parentName:"p"},"Person")," nodes which have a name ending with ",Object(i.a)("inlineCode",{parentName:"p"},"a"),"."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-cypher"},'MATCH (n :Person) WHERE n.name =~ ".*a$" RETURN n;\n')),Object(i.a)("p",null,"Output:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre"},'+--------------------------+\n| n                        |\n+--------------------------+\n| (:Person {name: "Anna"}) |\n+--------------------------+\n')),Object(i.a)("p",null,"The regular expression syntax is based on the modified ECMAScript regular\nexpression grammar. The ECMAScript grammar can be found\n",Object(i.a)("a",{parentName:"p",href:"http://ecma-international.org/ecma-262/5.1/#sec-15.10"},"here"),", while the\nmodifications are described in ",Object(i.a)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/regex/ecmascript"},"this\ndocument"),"."),Object(i.a)("h2",{id:"data-set-queries"},"Data set Queries"),Object(i.a)("p",null,"We encourage you to try out the examples by yourself.\nYou can get our data set locally by executing the following query block."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) DETACH DELETE n;\n\nCREATE (c1:Country { name: 'Germany', language: 'German', continent: 'Europe', population: 83000000 });\nCREATE (c2:Country { name: 'France', language: 'French', continent: 'Europe', population: 67000000 });\nCREATE (c3:Country { name: 'United Kingdom', language: 'English', continent: 'Europe', population: 66000000 });\n\nMATCH (c1),(c2)\nWHERE c1.name= 'Germany' AND c2.name = 'France'\nCREATE (c2)<-[:WORKING_IN { date_of_start: 2014 }]-(p:Person { name: 'John' })-[:LIVING_IN { date_of_start: 2014 }]->(c1);\n\nMATCH (c)\nWHERE c.name= 'United Kingdom'\nCREATE (c)<-[:WORKING_IN { date_of_start: 2014 }]-(p:Person { name: 'Harry' })-[:LIVING_IN { date_of_start: 2013 }]->(c);\n\nMATCH (p1),(p2)\nWHERE p1.name = 'John' AND p2.name = 'Harry'\nCREATE (p1)-[:FRIENDS_WITH { date_of_start: 2011 }]->(p2);\n\nMATCH (p1),(p2)\nWHERE p1.name = 'John' AND p2.name = 'Harry'\nCREATE (p1)<-[:FRIENDS_WITH { date_of_start: 2012 }]-(:Person { name: 'Anna' })-[:FRIENDS_WITH { date_of_start: 2014 }]->(p2);\n\nMATCH (p),(c1),(c2)\nWHERE p.name = 'Anna' AND c1.name = 'United Kingdom' AND c2.name = 'Germany'\nCREATE (c2)<-[:LIVING_IN { date_of_start: 2014 }]-(p)-[:LIVING_IN { date_of_start: 2014 }]->(c1);\n\nMATCH (n)-[r]->(m) RETURN n,r,m;\n")))}s.isMDXComponent=!0}}]);