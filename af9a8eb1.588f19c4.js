(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{148:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return s}));var a=t(3),r=t(7),o=(t(0),t(180)),i={id:"optional-match",title:"OPTIONAL MATCH clause",sidebar_label:"OPTIONAL MATCH"},l={unversionedId:"clauses/optional-match",id:"clauses/optional-match",isDocsHomePage:!1,title:"OPTIONAL MATCH clause",description:"The MATCH clause can be modified by prepending the OPTIONAL keyword.",source:"@site/cypher-manual/clauses/optional-match.md",slug:"/clauses/optional-match",permalink:"/cypher-manual/clauses/optional-match",editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/clauses/optional-match.md",version:"current",sidebar_label:"OPTIONAL MATCH",sidebar:"cypher_manual",previous:{title:"MERGE clause",permalink:"/cypher-manual/clauses/merge"},next:{title:"REMOVE clause",permalink:"/cypher-manual/clauses/remove"}},c=[{value:"Data Set",id:"data-set",children:[]},{value:"1. Get optional relationships",id:"1-get-optional-relationships",children:[]},{value:"2. Optional typed and named relationship",id:"2-optional-typed-and-named-relationship",children:[]},{value:"Data set Queries",id:"data-set-queries",children:[]}],p={toc:c};function s(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.a)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(o.a)("p",null,"The ",Object(o.a)("inlineCode",{parentName:"p"},"MATCH")," clause can be modified by prepending the ",Object(o.a)("inlineCode",{parentName:"p"},"OPTIONAL")," keyword.\n",Object(o.a)("inlineCode",{parentName:"p"},"OPTIONAL MATCH")," clause behaves the same as a regular ",Object(o.a)("inlineCode",{parentName:"p"},"MATCH"),", but when it fails to find the pattern,\nmissing parts of the pattern will be filled with null values."),Object(o.a)("ol",null,Object(o.a)("li",{parentName:"ol"},Object(o.a)("a",{parentName:"li",href:"#1-get-optional-relationships"},"Get optional relationships")),Object(o.a)("li",{parentName:"ol"},Object(o.a)("a",{parentName:"li",href:"#2-optional-typed-and-named-relationship"},"Optional typed and named relationship"))),Object(o.a)("h2",{id:"data-set"},"Data Set"),Object(o.a)("p",null,"The following examples are executed with this data set. You can create this data set\nlocally by executing the queries at the end of the page: ",Object(o.a)("a",{parentName:"p",href:"#data-set-queries"},"Data Set"),"."),Object(o.a)("img",{src:"https://raw.githubusercontent.com/g-despot/images/master/data_set.png",alt:"Data set",style:{height:380}}),Object(o.a)("h2",{id:"1-get-optional-relationships"},"1. Get optional relationships"),Object(o.a)("p",null,"Using ",Object(o.a)("inlineCode",{parentName:"p"},"OPTIONAL MATCH")," when returning a relationship that doesn't exist will return the default value ",Object(o.a)("inlineCode",{parentName:"p"},"NULL")," instead."),Object(o.a)("p",null,"The returned property of an optional element that is ",Object(o.a)("inlineCode",{parentName:"p"},"NULL")," will also be ",Object(o.a)("inlineCode",{parentName:"p"},"NULL"),"."),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c1:Country { name: 'France' })\nOPTIONAL MATCH (c1)--(c2:Country { name: 'Germany' })\nRETURN c2;\n")),Object(o.a)("p",null,"Output:"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},"+------+\n| c2   |\n+------+\n| Null |\n+------+\n")),Object(o.a)("h2",{id:"2-optional-typed-and-named-relationship"},"2. Optional typed and named relationship"),Object(o.a)("p",null,"The ",Object(o.a)("inlineCode",{parentName:"p"},"OPTIONAL MATCH")," clause allows you to use the same conventions as ",Object(o.a)("inlineCode",{parentName:"p"},"MATCH")," when it comes to handling variables and relationship types."),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country { name: 'United Kingdom' })\nOPTIONAL MATCH (c)-[r:LIVES_IN]->()\nRETURN c.name, r;\n")),Object(o.a)("p",null,"Output:"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},"+----------------+----------------+\n| c.name         | r              |\n+----------------+----------------+\n| United Kingdom | Null           |\n+----------------+----------------+\n")),Object(o.a)("p",null,"Because there are no outgoing relationships of type ",Object(o.a)("inlineCode",{parentName:"p"},"LIVES_IN")," for the node, the value of r is ",Object(o.a)("inlineCode",{parentName:"p"},"null")," while the value of ",Object(o.a)("inlineCode",{parentName:"p"},"contry.name")," is ",Object(o.a)("inlineCode",{parentName:"p"},"'United Kingdom'"),"."),Object(o.a)("h2",{id:"data-set-queries"},"Data set Queries"),Object(o.a)("p",null,"We encourage you to try out the examples by yourself.\nYou can get our data set locally by executing the following query block."),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) DETACH DELETE n;\n\nCREATE (c1:Country { name: 'Germany', language: 'German', continent: 'Europe', population: 83000000 });\nCREATE (c2:Country { name: 'France', language: 'French', continent: 'Europe', population: 67000000 });\nCREATE (c3:Country { name: 'United Kingdom', language: 'English', continent: 'Europe', population: 66000000 });\n\nMATCH (c1),(c2)\nWHERE c1.name= 'Germany' AND c2.name = 'France'\nCREATE (c2)<-[:WORKING_IN { date_of_start: 2014 }]-(p:Person { name: 'John' })-[:LIVING_IN { date_of_start: 2014 }]->(c1);\n\nMATCH (c)\nWHERE c.name= 'United Kingdom'\nCREATE (c)<-[:WORKING_IN { date_of_start: 2014 }]-(p:Person { name: 'Harry' })-[:LIVING_IN { date_of_start: 2013 }]->(c);\n\nMATCH (p1),(p2)\nWHERE p1.name = 'John' AND p2.name = 'Harry'\nCREATE (p1)-[:FRIENDS_WITH { date_of_start: 2011 }]->(p2);\n\nMATCH (p1),(p2)\nWHERE p1.name = 'John' AND p2.name = 'Harry'\nCREATE (p1)<-[:FRIENDS_WITH { date_of_start: 2012 }]-(:Person { name: 'Anna' })-[:FRIENDS_WITH { date_of_start: 2014 }]->(p2);\n\nMATCH (p),(c1),(c2)\nWHERE p.name = 'Anna' AND c1.name = 'United Kingdom' AND c2.name = 'Germany'\nCREATE (c2)<-[:LIVING_IN { date_of_start: 2014 }]-(p)-[:LIVING_IN { date_of_start: 2014 }]->(c1);\n\nMATCH (n)-[r]->(m) RETURN n,r,m;\n")))}s.isMDXComponent=!0},180:function(e,n,t){"use strict";t.d(n,"a",(function(){return d}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),s=function(e){var n=r.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(t),d=a,O=m["".concat(i,".").concat(d)]||m[d]||u[d]||o;return t?r.a.createElement(O,l(l({ref:n},p),{},{components:t})):r.a.createElement(O,l({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);